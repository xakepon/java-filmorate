DROP TABLE IF EXISTS genres, MPA_ids, film, motion_picture_association, film_genres, users, likes, friends;

CREATE TABLE IF NOT EXISTS genres (
    genre_id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY NOT NULL,
    genre_name varchar NOT NULL
);

--INSERT INTO genres (genre_name) VALUES
 --       ('Комедия'),
 --       ('Драма'),
 --       ('Мультфильм'),
 --       ('Триллер'),
 --       ('Документальный'),
 --       ('Боевик');

CREATE TABLE IF NOT EXISTS motion_picture_association (
    MPA_id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY NOT NULL,
    MPA_name varchar NOT NULL
);

 --INSERT INTO motion_picture_association (MPA_name) VALUES
 --       ('G'),
 --       ('PG'),
 --       ('PG-13'),
 --       ('R'),
 --       ('NC-17');


CREATE TABLE IF NOT EXISTS film (
    film_id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY NOT NULL,
    name varchar NOT NULL,
    description varchar,
    release_date timestamp CHECK (release_date >= '1895-12-28 00:00:00'),
    duration integer CHECK (duration>0)
    --MPA_id integer
);

CREATE TABLE IF NOT EXISTS MPA_ids (
    film_id integer PRIMARY KEY NOT NULL,
    mpa_id integer NOT NULL,
    FOREIGN KEY (film_id) REFERENCES film (film_id),
    FOREIGN KEY (mpa_id) REFERENCES motion_picture_association (mpa_id)

);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id integer  NOT NULL,
    genre_id integer NOT NULL,
    FOREIGN KEY (genre_id) REFERENCES genres (genre_id),
    FOREIGN KEY (film_id) REFERENCES film (film_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY NOT NULL,
    email varchar NOT NULL,
    login varchar NOT NULL,
    name varchar NOT NULL,
    birthday timestamp CHECK (birthday <= CURRENT_TIMESTAMP) --проверка что день рождения не старше текущей даты
);

CREATE TABLE IF NOT EXISTS likes (
    film_id integer NOT NULL,
    user_id integer,
    FOREIGN KEY (film_id) REFERENCES film (film_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    UNIQUE(film_id,user_id)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id integer NOT NULL,
    friends_id integer NOT NULL,
    status varchar NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    UNIQUE (user_id, friends_id, status)
);